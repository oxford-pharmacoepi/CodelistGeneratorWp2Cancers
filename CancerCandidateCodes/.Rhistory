logicDescription = NA,
generateStats=TRUE)
}
library(CirceR)
for(i in 1:length(cohortJsonFiles)){
working.json<-here("jsonfiles", "Preliminary",
cohortJsonFiles[i])
cohortJson <- readChar(working.json, file.info(working.json)$size)
cohortExpression <- cohortExpressionFromJson(cohortJson) # generates the sql
sql <- buildCohortQuery(cohortExpression,
options = CirceR::createGenerateOptions(generateStats = TRUE))
cohortDefinitionSet[[i]]<-tibble(atlasId = i,
cohortId = i,
cohortName = str_replace(cohortJsonFiles[i],".json",""),
json=cohortJson,
sql=sql,
logicDescription = NA,
generateStats=TRUE)
}
cohortDefinitionSet<-bind_rows(cohortDefinitionSet)
cohortJsonFiles <- 1
working.json<-here("jsonfiles", "Preliminary",
cohortJsonFiles[i])
cohortJsonFiles <- list.files(here("jsonfiles", "Preliminary"))
cohortJsonFiles <- cohortJsonFiles[str_detect(cohortJsonFiles,".json")]
i = 1
working.json<-here("jsonfiles", "Preliminary",
cohortJsonFiles[i])
cohortJson <- readChar(working.json, file.info(working.json)$size)
cohortExpression <- cohortExpressionFromJson(cohortJson) # generates the sql
sql <- buildCohortQuery(cohortExpression,
options = CirceR::createGenerateOptions(generateStats = TRUE))
View(cohortExpression)
cohortDefinitionSet[[i]]<-tibble(atlasId = i,
cohortId = i,
cohortName = str_replace(cohortJsonFiles[i],".json",""),
json=cohortJson,
sql=sql,
logicDescription = NA,
generateStats=FALSE)
View(cohortDefinitionSet)
cohortDefinitionSet<-bind_rows(cohortDefinitionSet)
View(cohortExpression)
cohortExpression$conceptSets
cohortExpression$conceptSets
library(tidyverse)
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
map_df(~read_csv(.))
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv")
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
map_df(~read_csv(.))
library(readr)
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
map(read_csv)
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
map(read_csv)
here("candidate_codes_from_collabs")
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv")
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv")
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv") %>%
map(read_csv)
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv", full.names=TRUE)
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv", full.names=TRUE) %>%
map(read_csv)
View(df)
df
df[[1]]
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv", full.names=TRUE)
candidateCodelists <- list("liver_cancer_codes" = liver_codes1,
"stomach_cancer_codes" = stomach_codes1,
"headneck_cancer_codes" = headneck_codes1,
"breast_cancer_codes" =  df[[1]],
"colorectal_cancer_codes" = df[[2]],
"lung_cancer_codes" =  df[[3]],
"prostate_cancer_codes" = df[[4]])
Sys.time()
tic()
liver_codes1<-getCandidateCodes(keywords=c( "malignant neoplasm of liver") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"uterine body",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid" ),
standardConcept = standardConceptConditions,
searchInSynonyms = FALSE,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
View(liver_codes1)
Sys.time()
tic()
stomach_codes1<-getCandidateCodes(keywords=c( "malignant tumor of stomach") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid"
),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
View(stomach_codes1)
Sys.time()
tic()
headneck_codes1<-getCandidateCodes(keywords=c(   "malignant tumor of lip" ,
"malignant tumor of base of tongue" ,
"malignant tumor of tongue" ,
"malignant tumor of gum" ,
"malignant tumor of floor of mouth" ,
"malignant tumor of palate" ,
"malignant tumor of buccal mucosa" ,
"malignant tumor of oral cavity" ,
"malignant tumor of parotid gland" ,
"malignant tumor of major salivary gland" ,
"malignant tumor of tonsil" ,
"malignant tumor of oropharynx" ,
"malignant tumor of nasopharynx" ,
"malignant tumor of pyriform fossa" ,
"malignant tumor of hypopharynx" ,
"malignant tumor of postcricoid region" ,
"malignant tumor of pharynx" ,
"malignant tumor of Waldeyer's ring" ,
"malignant neoplasm of lip, oral cavity and pharynx" ,
"malignant tumor of middle ear" ,
"malignant tumor of nasal cavity" ,
"malignant tumor of nasal sinuses" ,
"malignant tumor of larynx" ) ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid"
),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
df <-
list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv", full.names=TRUE) %>%
map(read_csv)
df
candidateCodelists <- list("liver_cancer_codes" = liver_codes1,
"stomach_cancer_codes" = stomach_codes1,
"headneck_cancer_codes" = headneck_codes1,
"breast_cancer_codes" =  df[[1]],
"colorectal_cancer_codes" = df[[2]],
"lung_cancer_codes" =  df[[3]],
"prostate_cancer_codes" = df[[4]])
candidateCodelists
write.xlsx(candidateCodelists, file = "cancer_candidate_codes.xlsx")
View(candidateCodelists)
here()
write.xlsx(candidateCodelists, file = "cancer_candidate_codes.xlsx")
df[[1]]$Vocabulary
table(df[[1]]$Vocabulary)
df[[1]] <- df[[1]] %>%
filter(Vocabulary == "SNOMED")
table(df[[1]]$Vocabulary)
df[[2]] <- df[[2]] %>%
filter(Vocabulary == "SNOMED")
df[[3]] <- df[[3]] %>%
filter(Vocabulary == "SNOMED")
df[[4]] <- df[[4]] %>%
filter(Vocabulary == "SNOMED")
candidateCodelists <- list("liver_cancer_codes" = liver_codes1,
"stomach_cancer_codes" = stomach_codes1,
"headneck_cancer_codes" = headneck_codes1,
"breast_cancer_codes" =  df[[1]],
"colorectal_cancer_codes" = df[[2]],
"lung_cancer_codes" =  df[[3]],
"prostate_cancer_codes" = df[[4]])
write.xlsx(candidateCodelists, file = "cancer_candidate_codes.xlsx")
renv::activate()
renv::restore()
library(DBI)
library(arrow)
library(dbplyr)
library(dplyr)
library(openxlsx)
library(here)
library(CodelistGenerator)
library(readr)
library(tictoc)
library(stringr)
library(CohortGenerator)
library(CirceR)
library(tidyverse)
library(readr)
renv::activate()
renv::restore()
renv::activate()
renv::restore()
library(DBI)
library(arrow)
library(dbplyr)
library(dplyr)
library(openxlsx)
library(here)
library(CodelistGenerator)
library(readr)
library(tictoc)
library(stringr)
library(CohortGenerator)
library(CirceR)
library(tidyverse)
library(readr)
vocab.folder<-c("C:/Users/dnewby/OneDrive - Nexus365/Desktop/Athena Vocabs/") # path to directory of unzipped files
concept<-read_delim(paste0(vocab.folder,"/CONCEPT.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_relationship<-read_delim(paste0(vocab.folder,"/CONCEPT_RELATIONSHIP.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_ancestor<-read_delim(paste0(vocab.folder,"/CONCEPT_ANCESTOR.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_synonym<-read_delim(paste0(vocab.folder,"/CONCEPT_SYNONYM.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(db, "concept", concept, overwrite=TRUE)
dbWriteTable(db, "concept_relationship", concept_relationship, overwrite=TRUE)
dbWriteTable(db, "concept_ancestor", concept_ancestor, overwrite=TRUE)
dbWriteTable(db, "concept_synonym", concept_synonym, overwrite=TRUE)
rm(concept,concept_relationship, concept_ancestor, concept_synonym)
vocabulary_database_schema<-"main"
# search strategy for conditions
standardConceptConditions <-c("Standard", "Classification")
searchViaSynonymsConditions <- TRUE
searchInSynonymsConditions <- FALSE
searchNonStandardConditions <- TRUE
includeDescendantsConditions <- TRUE
includeAncestorConditions <- FALSE
Sys.time()
tic()
liver_codes1<-getCandidateCodes(keywords=c( "malignant neoplasm of liver") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"uterine body",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid" ),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
Sys.time()
tic()
stomach_codes1<-getCandidateCodes(keywords=c( "malignant tumor of stomach") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid"
),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
# create codelist for HEAD/NECK CANCER ---------------------------------------
# criteria:
# Malignant cancer only
# No codes for benign/ in situ, lymphoma, melanoma, carcnoids (neuroendocrine)
# No codes for secondary cancer
# No codes for cancer in brain or eye as not considered head/neck cancer
# No codes related to thyroid cancer as not considered head/neck cancer
# No codes related to skin of head/scalp/neck and neck as this is skin cancer
Sys.time()
tic()
headneck_codes1<-getCandidateCodes(keywords=c(   "malignant tumor of lip" ,
"malignant tumor of base of tongue" ,
"malignant tumor of tongue" ,
"malignant tumor of gum" ,
"malignant tumor of floor of mouth" ,
"malignant tumor of palate" ,
"malignant tumor of buccal mucosa" ,
"malignant tumor of oral cavity" ,
"malignant tumor of parotid gland" ,
"malignant tumor of major salivary gland" ,
"malignant tumor of tonsil" ,
"malignant tumor of oropharynx" ,
"malignant tumor of nasopharynx" ,
"malignant tumor of pyriform fossa" ,
"malignant tumor of hypopharynx" ,
"malignant tumor of postcricoid region" ,
"malignant tumor of pharynx" ,
"malignant tumor of Waldeyer's ring" ,
"malignant neoplasm of lip, oral cavity and pharynx" ,
"malignant tumor of middle ear" ,
"malignant tumor of nasal cavity" ,
"malignant tumor of nasal sinuses" ,
"malignant tumor of larynx" ) ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid"
),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
# create codelist for PANCREATIC CANCER ---------------------------------------
# criteria:
# Malignant cancer only
# No codes for benign/ in situ, lymphoma, melanoma, carcnoids (neuroendocrine)
# No codes for secondary cancer
Sys.time()
tic()
pancreatic_codes1<-getCandidateCodes(keywords=c( "malignant tumor of pancreas") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"uterine body",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid" ),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
df <- list.files(path = here("candidate_codes_from_collabs"), pattern = "*.csv", full.names=TRUE) %>%
map(read_csv)
df[[1]] <- df[[1]] %>%
filter(Vocabulary == "SNOMED")
df[[2]] <- df[[2]] %>%
filter(Vocabulary == "SNOMED")
df[[3]] <- df[[3]] %>%
filter(Vocabulary == "SNOMED")
df[[4]] <- df[[4]] %>%
filter(Vocabulary == "SNOMED")
df[[5]] <- df[[5]] %>%
filter(Vocabulary == "SNOMED")
candidateCodelists <- list("liver_cancer_codes" = liver_codes1,
"stomach_cancer_codes" = stomach_codes1,
"headneck_cancer_codes" = headneck_codes1,
"pancreatic_cancer_codes" = pancreatic_codes1,
"breast_cancer_codes" =  df[[1]],
"colorectal_cancer_codes" = df[[2]],
"colorectal_cancer_codes_BROAD" = df[[3]],
"lung_cancer_codes" =  df[[4]],
"prostate_cancer_codes" = df[[5]])
View(pancreatic_codes1)
write.xlsx(candidateCodelists, file = "cancer_candidate_codes.xlsx")
renv::activate()
renv::restore()
# packages
library(DBI)
library(arrow)
library(dbplyr)
library(dplyr)
library(openxlsx)
library(here)
library(CodelistGenerator)
library(readr)
library(tictoc)
library(stringr)
library(CohortGenerator)
library(CirceR)
library(tidyverse)
library(readr)
# get the vocabs -----------------------------
# from database using or from athena directly
# this code loads of the CDM vocabularies that will we need from athena (https://athena.ohdsi.org)
vocab.folder<-c("C:/Users/dnewby/OneDrive - Nexus365/Desktop/Athena Vocabs/") # path to directory of unzipped files
concept<-read_delim(paste0(vocab.folder,"/CONCEPT.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_relationship<-read_delim(paste0(vocab.folder,"/CONCEPT_RELATIONSHIP.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_ancestor<-read_delim(paste0(vocab.folder,"/CONCEPT_ANCESTOR.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
concept_synonym<-read_delim(paste0(vocab.folder,"/CONCEPT_SYNONYM.csv"),
"\t", escape_double = FALSE, trim_ws = TRUE)
db <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(db, "concept", concept, overwrite=TRUE)
dbWriteTable(db, "concept_relationship", concept_relationship, overwrite=TRUE)
dbWriteTable(db, "concept_ancestor", concept_ancestor, overwrite=TRUE)
dbWriteTable(db, "concept_synonym", concept_synonym, overwrite=TRUE)
rm(concept,concept_relationship, concept_ancestor, concept_synonym)
vocabulary_database_schema<-"main"
standardConceptConditions <-c("Standard", "Classification")
searchViaSynonymsConditions <- FALSE
searchInSynonymsConditions <- FALSE
searchNonStandardConditions <- FALSE
includeDescendantsConditions <- FALSE
includeAncestorConditions <- FALSE
breast_codes1<-getCandidateCodes(keywords=c( "malignant neoplasm of female breast") ,
domains="Condition",
exclude = c("risk",
"fear",
"benign",
"screening",
"suspected",
"secondary",
"in situ",
"neuroendocrine",
"melanoma",
"lymphoma",
"carcinoid"
),
standardConcept = standardConceptConditions,
searchInSynonyms = searchInSynonymsConditions,
searchViaSynonyms = searchViaSynonymsConditions,
searchNonStandard = searchNonStandardConditions,
includeDescendants = includeDescendantsConditions,
includeAncestor = includeAncestorConditions,
db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema)
toc()
View(breast_codes1)
breastMappings<-getMappings(db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema,
candidateCodelist=breast_codes,
nonStandardVocabularies="read")
ls("package:codelistgenerator")
ls("package:CodelistGenerator")
breastMappings<-showMappings(db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema,
candidateCodelist=breast_codes,
nonStandardVocabularies="read")
breastMappings<-showMappings(db=db,
vocabularyDatabaseSchema =  vocabulary_database_schema,
candidateCodelist=breast_codes1,
nonStandardVocabularies="read")
View(breastMappings)
